plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id "org.sonarqube" version "3.3"
}

sonarqube {
    properties {
        property "sonar.projectKey", "enimaloc_Yui-MHCP001"
    }
}

group 'fr.enimaloc'
version new File('VERSION').text

def targetJavaVersion = 16
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}
compileJava.options.encoding = "UTF-8"

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://m2.enimaloc.fr/maven" }
    maven { url "https://m2.chew.pro/releases" }
    maven { url "https://m2.dv8tion.net/releases" }
}

dependencies {
    implementation 'fr.enimaloc.enutils:tuples:0.0.3'
    implementation 'fr.enimaloc.enutils:classes:0.0.3'
    implementation 'fr.enimaloc.enutils:hardwareUtils:0.0.3'

    implementation 'org.fastily:jwiki:1.8.0'

//    implementation 'pw.chew:jda-chewtils:1.22.0'

    implementation 'pw.chew:jda-chewtils:1.JDA-adapt'
    implementation 'net.dv8tion:JDA:5.0.0-alpha.4'

    implementation 'org.json:json:20211205'

    implementation 'com.sedmelluq:lavaplayer:1.3.78'

    implementation 'com.google.api-client:google-api-client:1.33.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.32.1'
    implementation 'com.google.apis:google-api-services-youtube:v3-rev222-1.25.0'

    implementation 'ch.qos.logback:logback-classic:1.2.10'
}

test {
    print "No test defined"
}

jar {
    actions = []
    dependsOn = []
    dependsOn('shadowJar')
}

processResources {
    def props = [GIT_BRANCH: gitBranch()]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('constant.txt') {
        expand props
    }
}

task buildImage(type: Exec) {
    group 'docker'
    dependsOn 'clean', 'shadowJar'
    commandLine 'docker', 'image', 'build',
            '-t',"enimaloc/${project.name.toLowerCase()}:latest",
            '-t',"enimaloc/${project.name.toLowerCase()}:${project.version}",
            '.'
}

task publishVersionImage(type: Exec) {
    group 'docker'
    dependsOn 'buildImage'
    commandLine 'docker','image','push',"enimaloc/${project.name.toLowerCase()}:${project.version}"
}

task publishLatestImage(type: Exec) {
    group 'docker'
    dependsOn 'buildImage'
    commandLine 'docker','image','push',"enimaloc/${project.name.toLowerCase()}:latest"
}

task publishAllImage {
    group 'docker'
    dependsOn 'publishVersionImage', 'publishLatestImage'
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}